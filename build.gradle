plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false

    id 'org.jetbrains.kotlin.jvm' version '1.9.20'
}


repositories {
    mavenCentral()
}

architectury {
    // minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.19.4+build.2:v2"
        compileOnly "org.jetbrains.kotlin:${rootProject.kotlin}"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    apply plugin: "org.jetbrains.kotlin.jvm"

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    base {
        archivesName = rootProject.archives_base_name
    }

    version = rootProject.mod_version
    group = rootProject.maven_group

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "${rootProject.kotlin_jvm_target}"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "${rootProject.kotlin_jvm_target}"
    }
}

configure(subprojects.findAll {it.name != "CelestialExpressions"} ) {
    dependencies {
        implementation(project(":CelestialExpressions"))
    }
}
java {
    sourceCompatibility = "21"
    targetCompatibility = "21"
}